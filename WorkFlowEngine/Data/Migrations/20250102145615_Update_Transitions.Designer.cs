// <auto-generated />
using System;
using FundManagerStateMachine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FundManagerStateMachine.Data.Migrations
{
    [DbContext(typeof(StateMachineDbContext))]
    [Migration("20250102145615_Update_Transitions")]
    partial class Update_Transitions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FundManagerStateMachine.Models.FilterCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("EvaluatedLinkedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EvaluatedLinkedId");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("LogicalOperator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LogicalOperator");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectId");

                    b.Property<int?>("ObjectTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectTypeId");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Operator");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentId");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PropertyName");

                    b.Property<int>("TransitionId")
                        .HasColumnType("int")
                        .HasColumnName("TransitionId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TransitionId");

                    b.ToTable("FilterConditions", "Administration");
                });

            modelBuilder.Entity("FundManagerStateMachine.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CreatedById");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateStamp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedDateTime");

                    b.HasKey("StateId");

                    b.ToTable("States", "Registration");
                });

            modelBuilder.Entity("FundManagerStateMachine.Models.Transition", b =>
                {
                    b.Property<int>("TransitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RollBackId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransitionId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("DateStamp")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("FromStateId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentStateId");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ToStateId")
                        .HasColumnType("int")
                        .HasColumnName("RollbackStateId");

                    b.HasKey("TransitionId");

                    b.HasIndex("FromStateId");

                    b.HasIndex("ToStateId");

                    b.ToTable("RollBackStates", "Project");
                });

            modelBuilder.Entity("FundManagerStateMachine.Models.FilterCondition", b =>
                {
                    b.HasOne("FundManagerStateMachine.Models.FilterCondition", "FilterCondition1")
                        .WithMany("FilterConditions1")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundManagerStateMachine.Models.Transition", "Transition")
                        .WithMany("FilterConditions")
                        .HasForeignKey("TransitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterCondition1");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("FundManagerStateMachine.Models.Transition", b =>
                {
                    b.HasOne("FundManagerStateMachine.Models.State", "FromState")
                        .WithMany()
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FundManagerStateMachine.Models.State", "ToState")
                        .WithMany()
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromState");

                    b.Navigation("ToState");
                });

            modelBuilder.Entity("FundManagerStateMachine.Models.FilterCondition", b =>
                {
                    b.Navigation("FilterConditions1");
                });

            modelBuilder.Entity("FundManagerStateMachine.Models.Transition", b =>
                {
                    b.Navigation("FilterConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
